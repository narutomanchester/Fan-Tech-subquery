/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PoolInitialTopStruct = { account: string; amount: BigNumberish };

export type PoolInitialTopStructOutput = [string, BigNumber] & {
  account: string;
  amount: BigNumber;
};

export interface FT_1710Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "INIT_BID_PRICE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "PERCENT_BASE()": FunctionFragment;
    "PRICE_A()": FunctionFragment;
    "PRICE_B()": FunctionFragment;
    "PRICE_C()": FunctionFragment;
    "PRICE_STEP_PERCENT()": FunctionFragment;
    "activateOwner(address,address,uint256,bytes)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "buyShares(address)": FunctionFragment;
    "getBiddingTime(address)": FunctionFragment;
    "getBuyPrice(address,uint256)": FunctionFragment;
    "getBuyPriceAfterFee(address,uint256)": FunctionFragment;
    "getFee(uint256)": FunctionFragment;
    "getPoolInitialBuy(address)": FunctionFragment;
    "getPoolInitialBuyPriceAfterFee(address)": FunctionFragment;
    "getPoolInitialTops(address)": FunctionFragment;
    "getPoolReferrer(address)": FunctionFragment;
    "getPoolReferrerFee(address)": FunctionFragment;
    "getPoolSubjectFee(address)": FunctionFragment;
    "getPoolValue(address)": FunctionFragment;
    "getPrice(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSellPrice(address,uint256)": FunctionFragment;
    "getSellPriceAfterFee(address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeShares(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "initializeSharesBySystem(address,address,uint256,uint256)": FunctionFragment;
    "initializeSharesSub(address,uint256,uint256)": FunctionFragment;
    "maxInitialShares()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(address)": FunctionFragment;
    "poolFeePercent()": FunctionFragment;
    "protocolFeeDestination()": FunctionFragment;
    "protocolFeePercent()": FunctionFragment;
    "referrerFeePercent()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sellShares(address,uint256)": FunctionFragment;
    "setMaxInitialShares(uint256)": FunctionFragment;
    "setPoolFeePercent(uint256)": FunctionFragment;
    "setProtocolFeeDestination(address)": FunctionFragment;
    "setProtocolFeePercent(uint256)": FunctionFragment;
    "setReferrerFeePercent(uint256)": FunctionFragment;
    "setSubjectFeePercent(uint256)": FunctionFragment;
    "subjectFeePercent()": FunctionFragment;
    "supplyOf(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "INIT_BID_PRICE"
      | "OPERATOR_ROLE"
      | "PERCENT_BASE"
      | "PRICE_A"
      | "PRICE_B"
      | "PRICE_C"
      | "PRICE_STEP_PERCENT"
      | "activateOwner"
      | "balanceOf"
      | "buyShares"
      | "getBiddingTime"
      | "getBuyPrice"
      | "getBuyPriceAfterFee"
      | "getFee"
      | "getPoolInitialBuy"
      | "getPoolInitialBuyPriceAfterFee"
      | "getPoolInitialTops"
      | "getPoolReferrer"
      | "getPoolReferrerFee"
      | "getPoolSubjectFee"
      | "getPoolValue"
      | "getPrice"
      | "getRoleAdmin"
      | "getSellPrice"
      | "getSellPriceAfterFee"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "initializeShares"
      | "initializeSharesBySystem"
      | "initializeSharesSub"
      | "maxInitialShares"
      | "owner"
      | "ownerOf"
      | "poolFeePercent"
      | "protocolFeeDestination"
      | "protocolFeePercent"
      | "referrerFeePercent"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "sellShares"
      | "setMaxInitialShares"
      | "setPoolFeePercent"
      | "setProtocolFeeDestination"
      | "setProtocolFeePercent"
      | "setReferrerFeePercent"
      | "setSubjectFeePercent"
      | "subjectFeePercent"
      | "supplyOf"
      | "supportsInterface"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_BID_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRICE_A", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRICE_B", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRICE_C", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRICE_STEP_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateOwner",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "buyShares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBiddingTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPriceAfterFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInitialBuy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInitialBuyPriceAfterFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInitialTops",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolReferrer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolReferrerFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSubjectFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPriceAfterFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeShares",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSharesBySystem",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSharesSub",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxInitialShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellShares",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxInitialShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubjectFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subjectFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "supplyOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_BID_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRICE_A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRICE_B", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRICE_C", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_STEP_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBiddingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInitialBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInitialBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInitialTops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolReferrerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSubjectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSharesBySystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSharesSub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxInitialShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxInitialShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubjectFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Trade(address,address,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TradeEventObject {
  trader: string;
  subject: string;
  isBuy: boolean;
  shareAmount: BigNumber;
  ethAmount: BigNumber;
  protocolFee: BigNumber;
  subjectFee: BigNumber;
  referrerFee: BigNumber;
  poolFee: BigNumber;
  balance: BigNumber;
  totalSupply: BigNumber;
  isAirdrop: boolean;
  isBid: boolean;
}
export type TradeEvent = TypedEvent<
  [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface FT_1710 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FT_1710Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    INIT_BID_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PERCENT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_A(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_B(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_C(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_STEP_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    activateOwner(
      sharesSubject: string,
      referrer: string,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(
      sharesSubject: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyShares(
      sharesSubject: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBiddingTime(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getBuyPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFee(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        protocolFee: BigNumber;
        subjectFee: BigNumber;
        referrerFee: BigNumber;
        poolFee: BigNumber;
      }
    >;

    getPoolInitialBuy(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPoolInitialBuyPriceAfterFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInitialTops(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[PoolInitialTopStructOutput[]]>;

    getPoolReferrer(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolReferrerFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolSubjectFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolValue(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSellPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getSellPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeShares(
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeSharesBySystem(
      sharesSubject: string,
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeSharesSub(
      sharesSubject: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    maxInitialShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<[string]>;

    protocolFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    referrerFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellShares(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxInitialShares(
      _maxInitialShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPoolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReferrerFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubjectFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subjectFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyOf(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  INIT_BID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  PERCENT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_A(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_B(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_C(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_STEP_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  activateOwner(
    sharesSubject: string,
    referrer: string,
    nonce: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(
    sharesSubject: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyShares(
    sharesSubject: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBiddingTime(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyPrice(
    sharesSubject: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyPriceAfterFee(
    sharesSubject: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFee(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      protocolFee: BigNumber;
      subjectFee: BigNumber;
      referrerFee: BigNumber;
      poolFee: BigNumber;
    }
  >;

  getPoolInitialBuy(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPoolInitialBuyPriceAfterFee(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInitialTops(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<PoolInitialTopStructOutput[]>;

  getPoolReferrer(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolReferrerFee(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolSubjectFee(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolValue(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    supply: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSellPrice(
    sharesSubject: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellPriceAfterFee(
    sharesSubject: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeShares(
    referrer: string,
    _initialShares: BigNumberish,
    _blockTime: BigNumberish,
    nonce: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeSharesBySystem(
    sharesSubject: string,
    referrer: string,
    _initialShares: BigNumberish,
    _blockTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeSharesSub(
    sharesSubject: string,
    _initialShares: BigNumberish,
    _blockTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  maxInitialShares(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(sharesSubject: string, overrides?: CallOverrides): Promise<string>;

  poolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeDestination(overrides?: CallOverrides): Promise<string>;

  protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  referrerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellShares(
    sharesSubject: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxInitialShares(
    _maxInitialShares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPoolFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFeeDestination(
    _feeDestination: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReferrerFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubjectFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subjectFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  supplyOf(
    sharesSubject: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    INIT_BID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    PERCENT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_A(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_B(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_C(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_STEP_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    activateOwner(
      sharesSubject: string,
      referrer: string,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      sharesSubject: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyShares(sharesSubject: string, overrides?: CallOverrides): Promise<void>;

    getBiddingTime(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        protocolFee: BigNumber;
        subjectFee: BigNumber;
        referrerFee: BigNumber;
        poolFee: BigNumber;
      }
    >;

    getPoolInitialBuy(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPoolInitialBuyPriceAfterFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInitialTops(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PoolInitialTopStructOutput[]>;

    getPoolReferrer(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolReferrerFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolSubjectFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolValue(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSellPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeShares(
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeSharesBySystem(
      sharesSubject: string,
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeSharesSub(
      sharesSubject: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxInitialShares(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(sharesSubject: string, overrides?: CallOverrides): Promise<string>;

    poolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<string>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    referrerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sellShares(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxInitialShares(
      _maxInitialShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeDestination(
      _feeDestination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferrerFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubjectFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subjectFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    supplyOf(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Trade(address,address,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      trader?: null,
      subject?: null,
      isBuy?: null,
      shareAmount?: null,
      ethAmount?: null,
      protocolFee?: null,
      subjectFee?: null,
      referrerFee?: null,
      poolFee?: null,
      balance?: null,
      totalSupply?: null,
      isAirdrop?: null,
      isBid?: null
    ): TradeEventFilter;
    Trade(
      trader?: null,
      subject?: null,
      isBuy?: null,
      shareAmount?: null,
      ethAmount?: null,
      protocolFee?: null,
      subjectFee?: null,
      referrerFee?: null,
      poolFee?: null,
      balance?: null,
      totalSupply?: null,
      isAirdrop?: null,
      isBid?: null
    ): TradeEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_BID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_A(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_B(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_C(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_STEP_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    activateOwner(
      sharesSubject: string,
      referrer: string,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(
      sharesSubject: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyShares(
      sharesSubject: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getBiddingTime(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(price: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInitialBuy(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInitialBuyPriceAfterFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInitialTops(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolReferrer(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolReferrerFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolSubjectFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolValue(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    initializeShares(
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    initializeSharesBySystem(
      sharesSubject: string,
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeSharesSub(
      sharesSubject: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    maxInitialShares(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    referrerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellShares(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxInitialShares(
      _maxInitialShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPoolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setReferrerFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubjectFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subjectFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    supplyOf(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INIT_BID_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_B(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_C(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_STEP_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateOwner(
      sharesSubject: string,
      referrer: string,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      sharesSubject: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyShares(
      sharesSubject: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBiddingTime(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInitialBuy(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInitialBuyPriceAfterFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInitialTops(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolReferrer(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolReferrerFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolSubjectFee(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolValue(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPrice(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPriceAfterFee(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeShares(
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeSharesBySystem(
      sharesSubject: string,
      referrer: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeSharesSub(
      sharesSubject: string,
      _initialShares: BigNumberish,
      _blockTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    maxInitialShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeDestination(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrerFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellShares(
      sharesSubject: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxInitialShares(
      _maxInitialShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPoolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReferrerFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubjectFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subjectFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyOf(
      sharesSubject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
